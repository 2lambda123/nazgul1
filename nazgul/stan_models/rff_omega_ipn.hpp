
// Code generated by stanc f7a881f
#include <stan/model/model_header.hpp>
namespace rff_omega_ipn_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 75, column 2 to column 18)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 76, column 2 to column 18)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 78, column 2 to column 29)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 83, column 2 to column 31)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 84, column 2 to column 38)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 86, column 2 to column 33)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 91, column 2 to column 36)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 92, column 2 to column 45)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 95, column 2 to column 25)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 102, column 2 to column 41)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 103, column 2 to column 55)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 105, column 3 to column 45)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 108, column 2 to column 18)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 109, column 2 to column 15)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 112, column 2 to column 25)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 114, column 2 to column 27)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 116, column 2 to column 36)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 117, column 2 to column 36)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 119, column 2 to column 18)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 123, column 2 to column 34)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 124, column 2 to column 34)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 132, column 4 to column 45)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 129, column 29 to line 134, column 3)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 129, column 2 to line 134, column 3)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 229, column 2 to column 47)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 230, column 2 to column 51)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 141, column 9 to column 20)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 141, column 2 to column 29)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 142, column 9 to column 20)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 142, column 2 to column 36)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 144, column 2 to column 17)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 145, column 2 to column 24)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 152, column 2 to column 23)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 153, column 2 to column 23)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 158, column 2 to column 26)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 165, column 2 to column 32)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 167, column 2 to column 40)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 172, column 2 to column 30)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 173, column 2 to column 30)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 176, column 2 to column 39)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 177, column 2 to column 31)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 180, column 4 to column 24)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 181, column 4 to column 38)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 179, column 27 to line 182, column 3)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 179, column 2 to line 182, column 3)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 216, column 2 to line 221, column 51)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 8, column 2 to column 18)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 9, column 18 to column 29)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 9, column 2 to column 31)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 10, column 2 to column 22)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 12, column 13 to column 24)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 12, column 26 to column 41)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 12, column 2 to column 43)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 14, column 31 to column 42)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 14, column 9 to column 24)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 14, column 2 to column 44)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 15, column 35 to column 46)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 15, column 9 to column 24)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 15, column 2 to column 48)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 18, column 19 to column 30)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 18, column 2 to column 32)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 20, column 2 to column 17)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 22, column 16 to column 27)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 22, column 2 to column 29)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 29, column 39 to column 50)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 29, column 9 to column 24)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 29, column 2 to column 68)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 31, column 2 to column 32)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 32, column 21 to column 32)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 32, column 2 to column 34)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 34, column 22 to column 35)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 34, column 2 to column 37)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 36, column 9 to column 20)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 36, column 2 to column 27)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 37, column 9 to column 20)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 37, column 2 to column 27)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 43, column 4 to column 27)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 44, column 4 to column 27)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 46, column 4 to column 26)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 41, column 26 to line 48, column 3)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 41, column 2 to line 48, column 3)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 52, column 4 to column 27)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 53, column 4 to column 27)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 50, column 26 to line 55, column 3)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 50, column 2 to line 55, column 3)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 59, column 2 to column 41)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 65, column 4 to column 42)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 63, column 30 to line 68, column 3)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 63, column 2 to line 68, column 3)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 75, column 9 to column 10)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 76, column 9 to column 10)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 78, column 13 to column 14)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 83, column 9 to column 20)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 84, column 9 to column 22)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 102, column 9 to column 20)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 103, column 9 to column 22)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 112, column 13 to column 14)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 114, column 9 to column 22)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 4, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 6, column 9, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 6, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 7, column 9, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 7, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 8, column 9, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 8, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 10, column 10, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 10, column 12, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 10, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 11, column 10, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 11, column 12, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 11, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 14, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 16, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 19, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 2, column 241, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 25, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 27, column 9, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 27, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 29, column 10, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 29, column 12, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 29, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 30, column 10, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 30, column 12, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 30, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 33, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 23, column 246, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 43, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 44, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 48, column 4, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 50, column 4, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 46, column 31, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 46, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 59, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 41, column 45, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 67, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 65, column 9, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 78, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 80, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 89, column 4, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 87, column 7, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 84, column 4, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 82, column 14, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 82, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 76, column 65, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 98, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 99, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 100, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 102, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 96, column 49, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 112, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 114, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 110, column 39, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 121, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 123, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 132, column 4, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 130, column 7, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 127, column 4, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 125, column 29, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 125, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 119, column 78, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 167, column 2, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)",
                                                      " (in '/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/functions.stan', line 164, column 53, included from\n'/Users/jburgess/coding/projects/pyipn/pyipn/stan_models/rff_omega_ipn.stan', line 2, column 0)"};

struct partial_log_like_bw_multi_scale_fast_rsfunctor__;
struct partial_total_like_rsfunctor__;
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__,
typename T12__, typename T13__>
stan::promote_args_t<T3__, T4__, T5__, T6__, T7__, stan::promote_args_t<T8__,
T9__, T10__, T11__,
T12__, stan::promote_args_t<T13__>>>
partial_log_like_bw_multi_scale(const std::vector<int>& counts_slice,
                                const int& start, const int& end,
                                const Eigen::Matrix<T3__, -1, 1>& time,
                                const Eigen::Matrix<T4__, -1, 1>& exposure,
                                const Eigen::Matrix<T5__, 1, -1>& omega1,
                                const Eigen::Matrix<T6__, 1, -1>& omega2,
                                const Eigen::Matrix<T7__, -1, 1>& beta1,
                                const Eigen::Matrix<T8__, -1, 1>& beta2,
                                const T9__& dt, const T10__& bkg,
                                const T11__& scale1, const T12__& scale2,
                                const T13__& amplitude, const int& k,
                                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          T6__,
          T7__, stan::promote_args_t<T8__,
          T9__,
          T10__,
          T11__,
          T12__, stan::promote_args_t<T13__>>>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 99;
    N = ((end - start) + 1);
    current_statement__ = 100;
    validate_non_negative_index("time_slice", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> time_slice;
    time_slice = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(time_slice, DUMMY_VAR__);
    
    current_statement__ = 101;
    assign(time_slice, nil_index_list(),
      subtract(
        rvalue(time, cons_list(index_min_max(start, end), nil_index_list()),
          "time"), dt), "assigning variable time_slice");
    current_statement__ = 102;
    validate_non_negative_index("expected_counts_log", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> expected_counts_log;
    expected_counts_log = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(expected_counts_log, DUMMY_VAR__);
    
    current_statement__ = 104;
    validate_non_negative_index("expected_counts", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> expected_counts;
    expected_counts = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(expected_counts, DUMMY_VAR__);
    
    current_statement__ = 106;
    validate_non_negative_index("tw1", "N", N);
    current_statement__ = 107;
    validate_non_negative_index("tw1", "k", k);
    Eigen::Matrix<local_scalar_t__, -1, -1> tw1;
    tw1 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, k);
    stan::math::fill(tw1, DUMMY_VAR__);
    
    current_statement__ = 108;
    assign(tw1, nil_index_list(), multiply(time_slice, omega1),
      "assigning variable tw1");
    current_statement__ = 109;
    validate_non_negative_index("tw2", "N", N);
    current_statement__ = 110;
    validate_non_negative_index("tw2", "k", k);
    Eigen::Matrix<local_scalar_t__, -1, -1> tw2;
    tw2 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, k);
    stan::math::fill(tw2, DUMMY_VAR__);
    
    current_statement__ = 111;
    assign(tw2, nil_index_list(), multiply(time_slice, omega2),
      "assigning variable tw2");
    current_statement__ = 112;
    assign(expected_counts_log, nil_index_list(),
      add(
        multiply(
          add(multiply(scale1, stan::math::cos(tw1)),
            multiply(scale2, stan::math::cos(tw2))), beta1),
        multiply(
          add(multiply(scale1, stan::math::sin(tw1)),
            multiply(scale2, stan::math::sin(tw2))), beta2)),
      "assigning variable expected_counts_log");
    current_statement__ = 113;
    assign(expected_counts, nil_index_list(),
      elt_multiply(
        rvalue(exposure,
          cons_list(index_min_max(start, end), nil_index_list()), "exposure"),
        add(multiply(stan::math::exp(expected_counts_log), amplitude), bkg)),
      "assigning variable expected_counts");
    current_statement__ = 114;
    return poisson_lpmf<propto__>(counts_slice, expected_counts);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct partial_log_like_bw_multi_scale_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__,
typename T12__, typename T13__>
stan::promote_args_t<T3__, T4__, T5__, T6__, T7__, stan::promote_args_t<T8__,
T9__, T10__, T11__,
T12__, stan::promote_args_t<T13__>>>
operator()(const std::vector<int>& counts_slice, const int& start,
           const int& end, const Eigen::Matrix<T3__, -1, 1>& time,
           const Eigen::Matrix<T4__, -1, 1>& exposure,
           const Eigen::Matrix<T5__, 1, -1>& omega1,
           const Eigen::Matrix<T6__, 1, -1>& omega2,
           const Eigen::Matrix<T7__, -1, 1>& beta1,
           const Eigen::Matrix<T8__, -1, 1>& beta2, const T9__& dt,
           const T10__& bkg, const T11__& scale1, const T12__& scale2,
           const T13__& amplitude, const int& k, std::ostream* pstream__)  const 
{
return partial_log_like_bw_multi_scale(counts_slice, start, end, time,
         exposure, omega1, omega2, beta1, beta2, dt, bkg, scale1, scale2,
         amplitude, k, pstream__);
}
};

template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__,
typename T12__, typename T13__>
stan::promote_args_t<T3__, T4__, T5__, T6__, T7__, stan::promote_args_t<T8__,
T9__, T10__, T11__,
T12__, stan::promote_args_t<T13__>>>
partial_log_like_bw_multi_scale_fast(const std::vector<int>& counts_slice,
                                     const int& start, const int& end,
                                     const Eigen::Matrix<T3__, -1, 1>& time,
                                     const Eigen::Matrix<T4__, -1, 1>& exposure,
                                     const Eigen::Matrix<T5__, 1, -1>& omega1,
                                     const Eigen::Matrix<T6__, 1, -1>& omega2,
                                     const Eigen::Matrix<T7__, -1, 1>& beta1,
                                     const Eigen::Matrix<T8__, -1, 1>& beta2,
                                     const T9__& dt, const T10__& bkg,
                                     const T11__& scale1,
                                     const T12__& scale2,
                                     const T13__& amplitude, const int& k,
                                     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T4__,
          T5__,
          T6__,
          T7__, stan::promote_args_t<T8__,
          T9__,
          T10__,
          T11__,
          T12__, stan::promote_args_t<T13__>>>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 116;
    N = ((end - start) + 1);
    current_statement__ = 117;
    validate_non_negative_index("time_slice", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> time_slice;
    time_slice = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(time_slice, DUMMY_VAR__);
    
    current_statement__ = 118;
    assign(time_slice, nil_index_list(),
      subtract(
        rvalue(time, cons_list(index_min_max(start, end), nil_index_list()),
          "time"), dt), "assigning variable time_slice");
    current_statement__ = 119;
    validate_non_negative_index("tw1", "N", N);
    current_statement__ = 120;
    validate_non_negative_index("tw1", "k", k);
    Eigen::Matrix<local_scalar_t__, -1, -1> tw1;
    tw1 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, k);
    stan::math::fill(tw1, DUMMY_VAR__);
    
    current_statement__ = 121;
    assign(tw1, nil_index_list(), multiply(time_slice, omega1),
      "assigning variable tw1");
    current_statement__ = 122;
    validate_non_negative_index("tw2", "N", N);
    current_statement__ = 123;
    validate_non_negative_index("tw2", "k", k);
    Eigen::Matrix<local_scalar_t__, -1, -1> tw2;
    tw2 = Eigen::Matrix<local_scalar_t__, -1, -1>(N, k);
    stan::math::fill(tw2, DUMMY_VAR__);
    
    current_statement__ = 124;
    assign(tw2, nil_index_list(), multiply(time_slice, omega2),
      "assigning variable tw2");
    current_statement__ = 125;
    return poisson_lpmf<propto__>(counts_slice,
             elt_multiply(
               rvalue(exposure,
                 cons_list(index_min_max(start, end), nil_index_list()),
                 "exposure"),
               add(
                 multiply(
                   stan::math::exp(
                     add(
                       multiply(
                         add(multiply(scale1, stan::math::cos(tw1)),
                           multiply(scale2, stan::math::cos(tw2))), beta1),
                       multiply(
                         add(multiply(scale1, stan::math::sin(tw1)),
                           multiply(scale2, stan::math::sin(tw2))), beta2))),
                   amplitude), bkg)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct partial_log_like_bw_multi_scale_fast_functor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__,
typename T12__, typename T13__>
stan::promote_args_t<T3__, T4__, T5__, T6__, T7__, stan::promote_args_t<T8__,
T9__, T10__, T11__,
T12__, stan::promote_args_t<T13__>>>
operator()(const std::vector<int>& counts_slice, const int& start,
           const int& end, const Eigen::Matrix<T3__, -1, 1>& time,
           const Eigen::Matrix<T4__, -1, 1>& exposure,
           const Eigen::Matrix<T5__, 1, -1>& omega1,
           const Eigen::Matrix<T6__, 1, -1>& omega2,
           const Eigen::Matrix<T7__, -1, 1>& beta1,
           const Eigen::Matrix<T8__, -1, 1>& beta2, const T9__& dt,
           const T10__& bkg, const T11__& scale1, const T12__& scale2,
           const T13__& amplitude, const int& k, std::ostream* pstream__)  const 
{
return partial_log_like_bw_multi_scale_fast(counts_slice, start, end, time,
         exposure, omega1, omega2, beta1, beta2, dt, bkg, scale1, scale2,
         amplitude, k, pstream__);
}
};


struct partial_log_like_bw_multi_scale_fast_rsfunctor__ {
template <typename T3__, typename T4__, typename T5__, typename T6__,
typename T7__, typename T8__, typename T9__, typename T10__, typename T11__,
typename T12__, typename T13__>
stan::promote_args_t<T3__, T4__, T5__, T6__, T7__, stan::promote_args_t<T8__,
T9__, T10__, T11__,
T12__, stan::promote_args_t<T13__>>>
operator()(const std::vector<int>& counts_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const Eigen::Matrix<T3__, -1, 1>& time,
           const Eigen::Matrix<T4__, -1, 1>& exposure,
           const Eigen::Matrix<T5__, 1, -1>& omega1,
           const Eigen::Matrix<T6__, 1, -1>& omega2,
           const Eigen::Matrix<T7__, -1, 1>& beta1,
           const Eigen::Matrix<T8__, -1, 1>& beta2, const T9__& dt,
           const T10__& bkg, const T11__& scale1, const T12__& scale2,
           const T13__& amplitude, const int& k)  const 
{
return partial_log_like_bw_multi_scale_fast(counts_slice, start + 1, end + 1,
         time, exposure, omega1, omega2, beta1, beta2, dt, bkg, scale1,
         scale2, amplitude, k, pstream__);
}
};

template <typename T4__, typename T5__, typename T6__, typename T7__,
typename T8__, typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__>
stan::promote_args_t<T4__, T5__, T6__, T7__, T8__, stan::promote_args_t<T9__,
T10__, T11__, T12__,
T13__, stan::promote_args_t<T14__>>>
partial_total_like(const std::vector<int>& detector_slice, const int& start,
                   const int& end,
                   const std::vector<std::vector<int>>& counts,
                   const std::vector<Eigen::Matrix<T4__, -1, 1>>& time,
                   const std::vector<Eigen::Matrix<T5__, -1, 1>>& exposure,
                   const Eigen::Matrix<T6__, 1, -1>& omega1,
                   const Eigen::Matrix<T7__, 1, -1>& omega2,
                   const Eigen::Matrix<T8__, -1, 1>& beta1,
                   const Eigen::Matrix<T9__, -1, 1>& beta2,
                   const Eigen::Matrix<T10__, -1, 1>& dt,
                   const Eigen::Matrix<T11__, -1, 1>& bkg,
                   const T12__& scale1, const T13__& scale2,
                   const Eigen::Matrix<T14__, -1, 1>& amplitude,
                   const int& k, const std::vector<int>& gs_array,
                   const std::vector<int>& N_time_bins,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T4__,
          T5__,
          T6__,
          T7__,
          T8__, stan::promote_args_t<T9__,
          T10__,
          T11__,
          T12__,
          T13__, stan::promote_args_t<T14__>>>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ lp;
    lp = DUMMY_VAR__;
    
    current_statement__ = 127;
    lp = 0.;
    int num_slice_terms;
    num_slice_terms = std::numeric_limits<int>::min();
    
    current_statement__ = 128;
    num_slice_terms = ((end - start) + 1);
    current_statement__ = 132;
    for (int m = 1; m <= num_slice_terms; ++m) {
      int n;
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 129;
      n = detector_slice[(m - 1)];
      current_statement__ = 130;
      lp = (lp +
             reduce_sum<partial_log_like_bw_multi_scale_fast_rsfunctor__>(
               rvalue(counts,
                 cons_list(index_uni(n),
                   cons_list(index_min_max(1, N_time_bins[(n - 1)]),
                     nil_index_list())), "counts"), gs_array[(n - 1)],
               pstream__,
               rvalue(time,
                 cons_list(index_uni(n),
                   cons_list(index_min_max(1, N_time_bins[(n - 1)]),
                     nil_index_list())), "time"),
               rvalue(exposure,
                 cons_list(index_uni(n),
                   cons_list(index_min_max(1, N_time_bins[(n - 1)]),
                     nil_index_list())), "exposure"), omega1, omega2, beta1,
               beta2, dt[(n - 1)], bkg[(n - 1)], scale1, scale2,
               amplitude[(n - 1)], k));}
    current_statement__ = 133;
    return lp;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct partial_total_like_functor__ {
template <typename T4__, typename T5__, typename T6__, typename T7__,
typename T8__, typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__>
stan::promote_args_t<T4__, T5__, T6__, T7__, T8__, stan::promote_args_t<T9__,
T10__, T11__, T12__,
T13__, stan::promote_args_t<T14__>>>
operator()(const std::vector<int>& detector_slice, const int& start,
           const int& end, const std::vector<std::vector<int>>& counts,
           const std::vector<Eigen::Matrix<T4__, -1, 1>>& time,
           const std::vector<Eigen::Matrix<T5__, -1, 1>>& exposure,
           const Eigen::Matrix<T6__, 1, -1>& omega1,
           const Eigen::Matrix<T7__, 1, -1>& omega2,
           const Eigen::Matrix<T8__, -1, 1>& beta1,
           const Eigen::Matrix<T9__, -1, 1>& beta2,
           const Eigen::Matrix<T10__, -1, 1>& dt,
           const Eigen::Matrix<T11__, -1, 1>& bkg, const T12__& scale1,
           const T13__& scale2, const Eigen::Matrix<T14__, -1, 1>& amplitude,
           const int& k, const std::vector<int>& gs_array,
           const std::vector<int>& N_time_bins, std::ostream* pstream__)  const 
{
return partial_total_like(detector_slice, start, end, counts, time, exposure,
         omega1, omega2, beta1, beta2, dt, bkg, scale1, scale2, amplitude, k,
         gs_array, N_time_bins, pstream__);
}
};


struct partial_total_like_rsfunctor__ {
template <typename T4__, typename T5__, typename T6__, typename T7__,
typename T8__, typename T9__, typename T10__, typename T11__, typename T12__,
typename T13__, typename T14__>
stan::promote_args_t<T4__, T5__, T6__, T7__, T8__, stan::promote_args_t<T9__,
T10__, T11__, T12__,
T13__, stan::promote_args_t<T14__>>>
operator()(const std::vector<int>& detector_slice, const int& start,
           const int& end, std::ostream* pstream__,
           const std::vector<std::vector<int>>& counts,
           const std::vector<Eigen::Matrix<T4__, -1, 1>>& time,
           const std::vector<Eigen::Matrix<T5__, -1, 1>>& exposure,
           const Eigen::Matrix<T6__, 1, -1>& omega1,
           const Eigen::Matrix<T7__, 1, -1>& omega2,
           const Eigen::Matrix<T8__, -1, 1>& beta1,
           const Eigen::Matrix<T9__, -1, 1>& beta2,
           const Eigen::Matrix<T10__, -1, 1>& dt,
           const Eigen::Matrix<T11__, -1, 1>& bkg, const T12__& scale1,
           const T13__& scale2, const Eigen::Matrix<T14__, -1, 1>& amplitude,
           const int& k, const std::vector<int>& gs_array,
           const std::vector<int>& N_time_bins)  const 
{
return partial_total_like(detector_slice, start + 1, end + 1, counts, time,
         exposure, omega1, omega2, beta1, beta2, dt, bkg, scale1, scale2,
         amplitude, k, gs_array, N_time_bins, pstream__);
}
};

double
c(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 135;
    return 299792.46;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct c_functor__ {
double
operator()(std::ostream* pstream__)  const 
{
return c(pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
angular_separation(const Eigen::Matrix<T0__, -1, 1>& grb_xyz,
                   const Eigen::Matrix<T1__, -1, 1>& sc_pointing_norm,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ tmp;
    tmp = DUMMY_VAR__;
    
    current_statement__ = 138;
    tmp = dot_product(grb_xyz, sc_pointing_norm);
    current_statement__ = 143;
    if (logical_gt(tmp, 0)) {
      current_statement__ = 141;
      return tmp;
    } else {
      current_statement__ = 139;
      return 0;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct angular_separation_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const Eigen::Matrix<T0__, -1, 1>& grb_xyz,
           const Eigen::Matrix<T1__, -1, 1>& sc_pointing_norm,
           std::ostream* pstream__)  const 
{
return angular_separation(grb_xyz, sc_pointing_norm, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
calculate_horizon_angle(const Eigen::Matrix<T0__, -1, 1>& sc_position,
                        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ earth_radius;
    earth_radius = DUMMY_VAR__;
    
    current_statement__ = 145;
    earth_radius = 6371.0;
    local_scalar_t__ altitude;
    altitude = DUMMY_VAR__;
    
    current_statement__ = 146;
    altitude = stan::math::sqrt(sum(elt_multiply(sc_position, sc_position)));
    local_scalar_t__ horizon_angle;
    horizon_angle = DUMMY_VAR__;
    
    current_statement__ = 147;
    horizon_angle = ((0.5 * stan::math::pi()) -
                      stan::math::acos((earth_radius / altitude)));
    current_statement__ = 148;
    return horizon_angle;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct calculate_horizon_angle_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const Eigen::Matrix<T0__, -1, 1>& sc_position,
           std::ostream* pstream__)  const 
{
return calculate_horizon_angle(sc_position, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
norm_vector(const Eigen::Matrix<T0__, -1, 1>& sc_position,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ norm;
    norm = DUMMY_VAR__;
    
    current_statement__ = 150;
    norm = stan::math::sqrt(sum(elt_multiply(sc_position, sc_position)));
    current_statement__ = 151;
    return divide(sc_position, norm);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct norm_vector_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& sc_position,
           std::ostream* pstream__)  const 
{
return norm_vector(sc_position, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
earth_occulation(const T0__& horizon_angle,
                 const Eigen::Matrix<T1__, -1, 1>& sc_position,
                 const Eigen::Matrix<T2__, -1, 1>& grb_xyz,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ tmp;
    tmp = DUMMY_VAR__;
    
    local_scalar_t__ angle;
    angle = DUMMY_VAR__;
    
    current_statement__ = 154;
    angle = stan::math::acos(dot_product(grb_xyz, minus(sc_position)));
    current_statement__ = 159;
    if (logical_lt(angle, horizon_angle)) {
      current_statement__ = 157;
      return 0.;
    } else {
      current_statement__ = 155;
      return 1.;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct earth_occulation_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& horizon_angle,
           const Eigen::Matrix<T1__, -1, 1>& sc_position,
           const Eigen::Matrix<T2__, -1, 1>& grb_xyz, std::ostream* pstream__)  const 
{
return earth_occulation(horizon_angle, sc_position, grb_xyz, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
time_delay(const Eigen::Matrix<T0__, -1, 1>& grb_xyz,
           const Eigen::Matrix<T1__, -1, 1>& sc_pos_diff,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 161;
    return (dot_product(grb_xyz, sc_pos_diff) * inv(c(pstream__)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct time_delay_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const Eigen::Matrix<T0__, -1, 1>& grb_xyz,
           const Eigen::Matrix<T1__, -1, 1>& sc_pos_diff,
           std::ostream* pstream__)  const 
{
return time_delay(grb_xyz, sc_pos_diff, pstream__);
}
};

class rff_omega_ipn_model final : public model_base_crtp<rff_omega_ipn_model> {

 private:
  int N_detectors;
  std::vector<int> N_time_bins;
  int max_N_time_bins;
  std::vector<std::vector<int>> counts;
  std::vector<Eigen::Matrix<double, -1, 1>> time;
  std::vector<Eigen::Matrix<double, -1, 1>> exposure;
  std::vector<Eigen::Matrix<double, -1, 1>> sc_pos;
  int k;
  std::vector<int> grainsize;
  std::vector<Eigen::Matrix<double, -1, 1>> log_exposure;
  double inv_sqrt_k;
  std::vector<int> detector_index;
  std::vector<Eigen::Matrix<double, -1, 1>> sc_diffs;
  Eigen::Matrix<double, -1, 1> maxs;
  Eigen::Matrix<double, -1, 1> mins;
  double max_range;
  int log_amplitude_1dim__;
  int amplitude_1dim__;
  int dt_1dim__;
 
 public:
  ~rff_omega_ipn_model() final { }
  
  std::string model_name() const final { return "rff_omega_ipn_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 f7a881f");
    stanc_info.push_back("stancflags = --include_paths=/Users/jburgess/coding/projects/pyipn/pyipn/stan_models");
    return stanc_info;
  }
  
  
  rff_omega_ipn_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "rff_omega_ipn_model_namespace::rff_omega_ipn_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 47;
      context__.validate_dims("data initialization","N_detectors","int",
          context__.to_vec());
      N_detectors = std::numeric_limits<int>::min();
      
      current_statement__ = 47;
      N_detectors = context__.vals_i("N_detectors")[(1 - 1)];
      current_statement__ = 48;
      validate_non_negative_index("N_time_bins", "N_detectors", N_detectors);
      current_statement__ = 49;
      context__.validate_dims("data initialization","N_time_bins","int",
          context__.to_vec(N_detectors));
      N_time_bins = std::vector<int>(N_detectors, std::numeric_limits<int>::min());
      
      current_statement__ = 49;
      assign(N_time_bins, nil_index_list(), context__.vals_i("N_time_bins"),
        "assigning variable N_time_bins");
      current_statement__ = 50;
      context__.validate_dims("data initialization","max_N_time_bins","int",
          context__.to_vec());
      max_N_time_bins = std::numeric_limits<int>::min();
      
      current_statement__ = 50;
      max_N_time_bins = context__.vals_i("max_N_time_bins")[(1 - 1)];
      current_statement__ = 51;
      validate_non_negative_index("counts", "N_detectors", N_detectors);
      current_statement__ = 52;
      validate_non_negative_index("counts", "max_N_time_bins",
                                  max_N_time_bins);
      current_statement__ = 53;
      context__.validate_dims("data initialization","counts","int",
          context__.to_vec(N_detectors, max_N_time_bins));
      counts = std::vector<std::vector<int>>(N_detectors, std::vector<int>(max_N_time_bins, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> counts_flat__;
        current_statement__ = 53;
        assign(counts_flat__, nil_index_list(), context__.vals_i("counts"),
          "assigning variable counts_flat__");
        current_statement__ = 53;
        pos__ = 1;
        current_statement__ = 53;
        for (int sym1__ = 1; sym1__ <= max_N_time_bins; ++sym1__) {
          current_statement__ = 53;
          for (int sym2__ = 1; sym2__ <= N_detectors; ++sym2__) {
            current_statement__ = 53;
            assign(counts,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              counts_flat__[(pos__ - 1)], "assigning variable counts");
            current_statement__ = 53;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 54;
      validate_non_negative_index("time", "N_detectors", N_detectors);
      current_statement__ = 55;
      validate_non_negative_index("time", "max_N_time_bins", max_N_time_bins);
      current_statement__ = 56;
      context__.validate_dims("data initialization","time","double",
          context__.to_vec(N_detectors, max_N_time_bins));
      time = std::vector<Eigen::Matrix<double, -1, 1>>(N_detectors, Eigen::Matrix<double, -1, 1>(max_N_time_bins));
      stan::math::fill(time, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> time_flat__;
        current_statement__ = 56;
        assign(time_flat__, nil_index_list(), context__.vals_r("time"),
          "assigning variable time_flat__");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= max_N_time_bins; ++sym1__) {
          current_statement__ = 56;
          for (int sym2__ = 1; sym2__ <= N_detectors; ++sym2__) {
            current_statement__ = 56;
            assign(time,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              time_flat__[(pos__ - 1)], "assigning variable time");
            current_statement__ = 56;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 57;
      validate_non_negative_index("exposure", "N_detectors", N_detectors);
      current_statement__ = 58;
      validate_non_negative_index("exposure", "max_N_time_bins",
                                  max_N_time_bins);
      current_statement__ = 59;
      context__.validate_dims("data initialization","exposure","double",
          context__.to_vec(N_detectors, max_N_time_bins));
      exposure = std::vector<Eigen::Matrix<double, -1, 1>>(N_detectors, Eigen::Matrix<double, -1, 1>(max_N_time_bins));
      stan::math::fill(exposure, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> exposure_flat__;
        current_statement__ = 59;
        assign(exposure_flat__, nil_index_list(),
          context__.vals_r("exposure"), "assigning variable exposure_flat__");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= max_N_time_bins; ++sym1__) {
          current_statement__ = 59;
          for (int sym2__ = 1; sym2__ <= N_detectors; ++sym2__) {
            current_statement__ = 59;
            assign(exposure,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              exposure_flat__[(pos__ - 1)], "assigning variable exposure");
            current_statement__ = 59;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 60;
      validate_non_negative_index("sc_pos", "N_detectors", N_detectors);
      current_statement__ = 61;
      context__.validate_dims("data initialization","sc_pos","double",
          context__.to_vec(N_detectors, 3));
      sc_pos = std::vector<Eigen::Matrix<double, -1, 1>>(N_detectors, Eigen::Matrix<double, -1, 1>(3));
      stan::math::fill(sc_pos, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sc_pos_flat__;
        current_statement__ = 61;
        assign(sc_pos_flat__, nil_index_list(), context__.vals_r("sc_pos"),
          "assigning variable sc_pos_flat__");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 61;
          for (int sym2__ = 1; sym2__ <= N_detectors; ++sym2__) {
            current_statement__ = 61;
            assign(sc_pos,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              sc_pos_flat__[(pos__ - 1)], "assigning variable sc_pos");
            current_statement__ = 61;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 62;
      context__.validate_dims("data initialization","k","int",
          context__.to_vec());
      k = std::numeric_limits<int>::min();
      
      current_statement__ = 62;
      k = context__.vals_i("k")[(1 - 1)];
      current_statement__ = 62;
      current_statement__ = 62;
      check_greater_or_equal(function__, "k", k, 1);
      current_statement__ = 63;
      validate_non_negative_index("grainsize", "N_detectors", N_detectors);
      current_statement__ = 64;
      context__.validate_dims("data initialization","grainsize","int",
          context__.to_vec(N_detectors));
      grainsize = std::vector<int>(N_detectors, std::numeric_limits<int>::min());
      
      current_statement__ = 64;
      assign(grainsize, nil_index_list(), context__.vals_i("grainsize"),
        "assigning variable grainsize");
      current_statement__ = 65;
      validate_non_negative_index("log_exposure", "N_detectors", N_detectors);
      current_statement__ = 66;
      validate_non_negative_index("log_exposure", "max_N_time_bins",
                                  max_N_time_bins);
      current_statement__ = 67;
      log_exposure = std::vector<Eigen::Matrix<double, -1, 1>>(N_detectors, Eigen::Matrix<double, -1, 1>(max_N_time_bins));
      stan::math::fill(log_exposure, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 67;
      assign(log_exposure, nil_index_list(), stan::math::log(exposure),
        "assigning variable log_exposure");
      current_statement__ = 68;
      inv_sqrt_k = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 68;
      inv_sqrt_k = inv_sqrt(k);
      current_statement__ = 69;
      validate_non_negative_index("detector_index", "N_detectors",
                                  N_detectors);
      current_statement__ = 70;
      detector_index = std::vector<int>(N_detectors, std::numeric_limits<int>::min());
      
      current_statement__ = 71;
      validate_non_negative_index("sc_diffs", "N_detectors - 1",
                                  (N_detectors - 1));
      current_statement__ = 72;
      sc_diffs = std::vector<Eigen::Matrix<double, -1, 1>>((N_detectors - 1), Eigen::Matrix<double, -1, 1>(3));
      stan::math::fill(sc_diffs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 73;
      validate_non_negative_index("maxs", "N_detectors", N_detectors);
      current_statement__ = 74;
      maxs = Eigen::Matrix<double, -1, 1>(N_detectors);
      stan::math::fill(maxs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 75;
      validate_non_negative_index("mins", "N_detectors", N_detectors);
      current_statement__ = 76;
      mins = Eigen::Matrix<double, -1, 1>(N_detectors);
      stan::math::fill(mins, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 81;
      for (int n = 1; n <= N_detectors; ++n) {
        current_statement__ = 77;
        assign(maxs, cons_list(index_uni(n), nil_index_list()),
          max(time[(n - 1)]), "assigning variable maxs");
        current_statement__ = 78;
        assign(mins, cons_list(index_uni(n), nil_index_list()),
          min(time[(n - 1)]), "assigning variable mins");
        current_statement__ = 79;
        assign(detector_index, cons_list(index_uni(n), nil_index_list()), n,
          "assigning variable detector_index");}
      current_statement__ = 85;
      for (int n = 1; n <= N_detectors; ++n) {
        current_statement__ = 82;
        assign(maxs, cons_list(index_uni(n), nil_index_list()),
          max(time[(n - 1)]), "assigning variable maxs");
        current_statement__ = 83;
        assign(mins, cons_list(index_uni(n), nil_index_list()),
          min(time[(n - 1)]), "assigning variable mins");}
      current_statement__ = 86;
      max_range = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 86;
      max_range = (max(maxs) - min(mins));
      current_statement__ = 89;
      for (int n = 1; n <= (N_detectors - 1); ++n) {
        current_statement__ = 87;
        assign(sc_diffs, cons_list(index_uni(n), nil_index_list()),
          subtract(sc_pos[(1 - 1)], sc_pos[((n + 1) - 1)]),
          "assigning variable sc_diffs");}
      current_statement__ = 90;
      validate_non_negative_index("beta1", "k", k);
      current_statement__ = 91;
      validate_non_negative_index("beta2", "k", k);
      current_statement__ = 92;
      validate_non_negative_index("omega_var", "k", k);
      current_statement__ = 93;
      validate_non_negative_index("log_bkg", "N_detectors", N_detectors);
      current_statement__ = 94;
      log_amplitude_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 94;
      log_amplitude_1dim__ = (N_detectors - 1);
      current_statement__ = 94;
      validate_non_negative_index("log_amplitude", "N_detectors - 1",
                                  log_amplitude_1dim__);
      current_statement__ = 95;
      validate_non_negative_index("bkg", "N_detectors", N_detectors);
      current_statement__ = 96;
      amplitude_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 96;
      amplitude_1dim__ = (N_detectors - 1);
      current_statement__ = 96;
      validate_non_negative_index("amplitude", "N_detectors - 1",
                                  amplitude_1dim__);
      current_statement__ = 97;
      validate_non_negative_index("omega", "k", k);
      current_statement__ = 98;
      dt_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 98;
      dt_1dim__ = (N_detectors - 1);
      current_statement__ = 98;
      validate_non_negative_index("dt", "N_detectors - 1", dt_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += k;
      num_params_r__ += k;
      num_params_r__ += 2 * k;
      num_params_r__ += N_detectors;
      num_params_r__ += log_amplitude_1dim__;
      num_params_r__ += 2;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 3;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "rff_omega_ipn_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> beta1;
      beta1 = Eigen::Matrix<local_scalar_t__, -1, 1>(k);
      stan::math::fill(beta1, DUMMY_VAR__);
      
      current_statement__ = 1;
      beta1 = in__.vector(k);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta2;
      beta2 = Eigen::Matrix<local_scalar_t__, -1, 1>(k);
      stan::math::fill(beta2, DUMMY_VAR__);
      
      current_statement__ = 2;
      beta2 = in__.vector(k);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> omega_var;
      omega_var = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(2, Eigen::Matrix<local_scalar_t__, 1, -1>(k));
      stan::math::fill(omega_var, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        assign(omega_var, cons_list(index_uni(sym1__), nil_index_list()),
          in__.row_vector(k), "assigning variable omega_var");}
      Eigen::Matrix<local_scalar_t__, -1, 1> log_bkg;
      log_bkg = Eigen::Matrix<local_scalar_t__, -1, 1>(N_detectors);
      stan::math::fill(log_bkg, DUMMY_VAR__);
      
      current_statement__ = 4;
      log_bkg = in__.vector(N_detectors);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_amplitude;
      log_amplitude = Eigen::Matrix<local_scalar_t__, -1, 1>(log_amplitude_1dim__);
      stan::math::fill(log_amplitude, DUMMY_VAR__);
      
      current_statement__ = 5;
      log_amplitude = in__.vector(log_amplitude_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> raw_scale;
      raw_scale = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(raw_scale, DUMMY_VAR__);
      
      current_statement__ = 6;
      raw_scale = in__.vector(2);
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        assign(raw_scale, nil_index_list(),
          stan::math::positive_ordered_constrain(raw_scale, lp__),
          "assigning variable raw_scale");
      } else {
        current_statement__ = 6;
        assign(raw_scale, nil_index_list(),
          stan::math::positive_ordered_constrain(raw_scale),
          "assigning variable raw_scale");
      }
      local_scalar_t__ range1_raw;
      range1_raw = DUMMY_VAR__;
      
      current_statement__ = 7;
      range1_raw = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        range1_raw = stan::math::lub_constrain(range1_raw, 0, 1, lp__);
      } else {
        current_statement__ = 7;
        range1_raw = stan::math::lub_constrain(range1_raw, 0, 1);
      }
      local_scalar_t__ range2_raw;
      range2_raw = DUMMY_VAR__;
      
      current_statement__ = 8;
      range2_raw = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        range2_raw = stan::math::lub_constrain(range2_raw, 0, range1_raw,
                       lp__);
      } else {
        current_statement__ = 8;
        range2_raw = stan::math::lub_constrain(range2_raw, 0, range1_raw);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> grb_xyz;
      grb_xyz = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
      stan::math::fill(grb_xyz, DUMMY_VAR__);
      
      current_statement__ = 9;
      grb_xyz = in__.vector(3);
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        assign(grb_xyz, nil_index_list(),
          stan::math::unit_vector_constrain(grb_xyz, lp__),
          "assigning variable grb_xyz");
      } else {
        current_statement__ = 9;
        assign(grb_xyz, nil_index_list(),
          stan::math::unit_vector_constrain(grb_xyz),
          "assigning variable grb_xyz");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> bkg;
      bkg = Eigen::Matrix<local_scalar_t__, -1, 1>(N_detectors);
      stan::math::fill(bkg, DUMMY_VAR__);
      
      current_statement__ = 10;
      assign(bkg, nil_index_list(), stan::math::exp(log_bkg),
        "assigning variable bkg");
      Eigen::Matrix<local_scalar_t__, -1, 1> amplitude;
      amplitude = Eigen::Matrix<local_scalar_t__, -1, 1>(amplitude_1dim__);
      stan::math::fill(amplitude, DUMMY_VAR__);
      
      current_statement__ = 11;
      assign(amplitude, nil_index_list(), stan::math::exp(log_amplitude),
        "assigning variable amplitude");
      Eigen::Matrix<local_scalar_t__, -1, 1> scale;
      scale = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(scale, DUMMY_VAR__);
      
      current_statement__ = 12;
      assign(scale, nil_index_list(), multiply(raw_scale, inv_sqrt(k)),
        "assigning variable scale");
      Eigen::Matrix<local_scalar_t__, -1, 1> range;
      range = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(range, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> bw;
      bw = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(bw, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> omega;
      omega = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(2, Eigen::Matrix<local_scalar_t__, 1, -1>(k));
      stan::math::fill(omega, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> dt;
      dt = Eigen::Matrix<local_scalar_t__, -1, 1>(dt_1dim__);
      stan::math::fill(dt, DUMMY_VAR__);
      
      current_statement__ = 17;
      assign(range, cons_list(index_uni(1), nil_index_list()),
        (range1_raw * max_range), "assigning variable range");
      current_statement__ = 18;
      assign(range, cons_list(index_uni(2), nil_index_list()),
        (range2_raw * max_range), "assigning variable range");
      current_statement__ = 19;
      assign(bw, nil_index_list(), inv(range), "assigning variable bw");
      current_statement__ = 20;
      assign(omega, cons_list(index_uni(1), nil_index_list()),
        multiply(omega_var[(1 - 1)], bw[(1 - 1)]), "assigning variable omega");
      current_statement__ = 21;
      assign(omega, cons_list(index_uni(2), nil_index_list()),
        multiply(omega_var[(2 - 1)], bw[(2 - 1)]), "assigning variable omega");
      current_statement__ = 24;
      for (int n = 1; n <= (N_detectors - 1); ++n) {
        current_statement__ = 22;
        assign(dt, cons_list(index_uni(n), nil_index_list()),
          time_delay(grb_xyz, sc_diffs[(n - 1)], pstream__),
          "assigning variable dt");}
      {
        current_statement__ = 27;
        validate_non_negative_index("all_dt", "N_detectors", N_detectors);
        Eigen::Matrix<local_scalar_t__, -1, 1> all_dt;
        all_dt = Eigen::Matrix<local_scalar_t__, -1, 1>(N_detectors);
        stan::math::fill(all_dt, DUMMY_VAR__);
        
        current_statement__ = 29;
        validate_non_negative_index("all_amplitude", "N_detectors",
                                    N_detectors);
        Eigen::Matrix<local_scalar_t__, -1, 1> all_amplitude;
        all_amplitude = Eigen::Matrix<local_scalar_t__, -1, 1>(N_detectors);
        stan::math::fill(all_amplitude, DUMMY_VAR__);
        
        current_statement__ = 31;
        assign(all_dt, cons_list(index_uni(1), nil_index_list()), 0.,
          "assigning variable all_dt");
        current_statement__ = 32;
        assign(all_amplitude, cons_list(index_uni(1), nil_index_list()), 1.,
          "assigning variable all_amplitude");
        current_statement__ = 33;
        lp_accum__.add(std_normal_lpdf<propto__>(beta1));
        current_statement__ = 34;
        lp_accum__.add(std_normal_lpdf<propto__>(beta2));
        current_statement__ = 35;
        lp_accum__.add(normal_lpdf<propto__>(raw_scale, 1, 1));
        current_statement__ = 36;
        lp_accum__.add(lognormal_lpdf<propto__>(range1_raw, 0, .2));
        current_statement__ = 37;
        lp_accum__.add(
          lognormal_lpdf<propto__>(range2_raw, stan::math::log(1e-2), .2));
        current_statement__ = 38;
        lp_accum__.add(std_normal_lpdf<propto__>(omega_var[(1 - 1)]));
        current_statement__ = 39;
        lp_accum__.add(std_normal_lpdf<propto__>(omega_var[(2 - 1)]));
        current_statement__ = 40;
        lp_accum__.add(
          normal_lpdf<propto__>(log_bkg, stan::math::log(500),
            stan::math::log(100)));
        current_statement__ = 41;
        lp_accum__.add(std_normal_lpdf<propto__>(log_amplitude));
        current_statement__ = 45;
        for (int n = 2; n <= N_detectors; ++n) {
          current_statement__ = 42;
          assign(all_dt, cons_list(index_uni(n), nil_index_list()),
            dt[((n - 1) - 1)], "assigning variable all_dt");
          current_statement__ = 43;
          assign(all_amplitude, cons_list(index_uni(n), nil_index_list()),
            amplitude[((n - 1) - 1)], "assigning variable all_amplitude");}
        current_statement__ = 46;
        lp_accum__.add(
          reduce_sum<partial_total_like_rsfunctor__>(detector_index, 1,
            pstream__, counts, time, exposure, omega[(1 - 1)],
            omega[(2 - 1)], beta1, beta2, all_dt, bkg, scale[(1 - 1)],
            scale[(2 - 1)], all_amplitude, k, grainsize, N_time_bins));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "rff_omega_ipn_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      Eigen::Matrix<double, -1, 1> beta1;
      beta1 = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(beta1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      beta1 = in__.vector(k);
      Eigen::Matrix<double, -1, 1> beta2;
      beta2 = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(beta2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      beta2 = in__.vector(k);
      std::vector<Eigen::Matrix<double, 1, -1>> omega_var;
      omega_var = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>(k));
      stan::math::fill(omega_var, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        assign(omega_var, cons_list(index_uni(sym1__), nil_index_list()),
          in__.row_vector(k), "assigning variable omega_var");}
      Eigen::Matrix<double, -1, 1> log_bkg;
      log_bkg = Eigen::Matrix<double, -1, 1>(N_detectors);
      stan::math::fill(log_bkg, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      log_bkg = in__.vector(N_detectors);
      Eigen::Matrix<double, -1, 1> log_amplitude;
      log_amplitude = Eigen::Matrix<double, -1, 1>(log_amplitude_1dim__);
      stan::math::fill(log_amplitude, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      log_amplitude = in__.vector(log_amplitude_1dim__);
      Eigen::Matrix<double, -1, 1> raw_scale;
      raw_scale = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(raw_scale, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      raw_scale = in__.vector(2);
      current_statement__ = 6;
      assign(raw_scale, nil_index_list(),
        stan::math::positive_ordered_constrain(raw_scale),
        "assigning variable raw_scale");
      double range1_raw;
      range1_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      range1_raw = in__.scalar();
      current_statement__ = 7;
      range1_raw = stan::math::lub_constrain(range1_raw, 0, 1);
      double range2_raw;
      range2_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      range2_raw = in__.scalar();
      current_statement__ = 8;
      range2_raw = stan::math::lub_constrain(range2_raw, 0, range1_raw);
      Eigen::Matrix<double, -1, 1> grb_xyz;
      grb_xyz = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(grb_xyz, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      grb_xyz = in__.vector(3);
      current_statement__ = 9;
      assign(grb_xyz, nil_index_list(),
        stan::math::unit_vector_constrain(grb_xyz),
        "assigning variable grb_xyz");
      Eigen::Matrix<double, -1, 1> bkg;
      bkg = Eigen::Matrix<double, -1, 1>(N_detectors);
      stan::math::fill(bkg, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> amplitude;
      amplitude = Eigen::Matrix<double, -1, 1>(amplitude_1dim__);
      stan::math::fill(amplitude, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> scale;
      scale = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(scale, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> range;
      range = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(range, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> bw;
      bw = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(bw, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, 1, -1>> omega;
      omega = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>(k));
      stan::math::fill(omega, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> dt;
      dt = Eigen::Matrix<double, -1, 1>(dt_1dim__);
      stan::math::fill(dt, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(beta1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(beta2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(omega_var[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= N_detectors; ++sym1__) {
        vars__.emplace_back(log_bkg[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= log_amplitude_1dim__; ++sym1__) {
        vars__.emplace_back(log_amplitude[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(raw_scale[(sym1__ - 1)]);}
      vars__.emplace_back(range1_raw);
      vars__.emplace_back(range2_raw);
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(grb_xyz[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 10;
      assign(bkg, nil_index_list(), stan::math::exp(log_bkg),
        "assigning variable bkg");
      current_statement__ = 11;
      assign(amplitude, nil_index_list(), stan::math::exp(log_amplitude),
        "assigning variable amplitude");
      current_statement__ = 12;
      assign(scale, nil_index_list(), multiply(raw_scale, inv_sqrt(k)),
        "assigning variable scale");
      current_statement__ = 17;
      assign(range, cons_list(index_uni(1), nil_index_list()),
        (range1_raw * max_range), "assigning variable range");
      current_statement__ = 18;
      assign(range, cons_list(index_uni(2), nil_index_list()),
        (range2_raw * max_range), "assigning variable range");
      current_statement__ = 19;
      assign(bw, nil_index_list(), inv(range), "assigning variable bw");
      current_statement__ = 20;
      assign(omega, cons_list(index_uni(1), nil_index_list()),
        multiply(omega_var[(1 - 1)], bw[(1 - 1)]), "assigning variable omega");
      current_statement__ = 21;
      assign(omega, cons_list(index_uni(2), nil_index_list()),
        multiply(omega_var[(2 - 1)], bw[(2 - 1)]), "assigning variable omega");
      current_statement__ = 24;
      for (int n = 1; n <= (N_detectors - 1); ++n) {
        current_statement__ = 22;
        assign(dt, cons_list(index_uni(n), nil_index_list()),
          time_delay(grb_xyz, sc_diffs[(n - 1)], pstream__),
          "assigning variable dt");}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N_detectors; ++sym1__) {
          vars__.emplace_back(bkg[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= amplitude_1dim__; ++sym1__) {
          vars__.emplace_back(amplitude[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(scale[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(range[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(bw[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(omega[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= dt_1dim__; ++sym1__) {
          vars__.emplace_back(dt[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double grb_phi;
      grb_phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 25;
      grb_phi = atan2(grb_xyz[(2 - 1)], grb_xyz[(1 - 1)]);
      double grb_theta;
      grb_theta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 26;
      grb_theta = -(stan::math::acos(grb_xyz[(3 - 1)]) -
                     (0.5 * stan::math::pi()));
      vars__.emplace_back(grb_phi);
      vars__.emplace_back(grb_theta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> beta1;
      beta1 = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(beta1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta1_flat__;
        current_statement__ = 1;
        assign(beta1_flat__, nil_index_list(), context__.vals_r("beta1"),
          "assigning variable beta1_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 1;
          assign(beta1, cons_list(index_uni(sym1__), nil_index_list()),
            beta1_flat__[(pos__ - 1)], "assigning variable beta1");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> beta2;
      beta2 = Eigen::Matrix<double, -1, 1>(k);
      stan::math::fill(beta2, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta2_flat__;
        current_statement__ = 2;
        assign(beta2_flat__, nil_index_list(), context__.vals_r("beta2"),
          "assigning variable beta2_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 2;
          assign(beta2, cons_list(index_uni(sym1__), nil_index_list()),
            beta2_flat__[(pos__ - 1)], "assigning variable beta2");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      std::vector<Eigen::Matrix<double, 1, -1>> omega_var;
      omega_var = std::vector<Eigen::Matrix<double, 1, -1>>(2, Eigen::Matrix<double, 1, -1>(k));
      stan::math::fill(omega_var, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> omega_var_flat__;
        current_statement__ = 3;
        assign(omega_var_flat__, nil_index_list(),
          context__.vals_r("omega_var"),
          "assigning variable omega_var_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 3;
            assign(omega_var,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              omega_var_flat__[(pos__ - 1)], "assigning variable omega_var");
            current_statement__ = 3;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> log_bkg;
      log_bkg = Eigen::Matrix<double, -1, 1>(N_detectors);
      stan::math::fill(log_bkg, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> log_bkg_flat__;
        current_statement__ = 4;
        assign(log_bkg_flat__, nil_index_list(), context__.vals_r("log_bkg"),
          "assigning variable log_bkg_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N_detectors; ++sym1__) {
          current_statement__ = 4;
          assign(log_bkg, cons_list(index_uni(sym1__), nil_index_list()),
            log_bkg_flat__[(pos__ - 1)], "assigning variable log_bkg");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> log_amplitude;
      log_amplitude = Eigen::Matrix<double, -1, 1>(log_amplitude_1dim__);
      stan::math::fill(log_amplitude, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> log_amplitude_flat__;
        current_statement__ = 5;
        assign(log_amplitude_flat__, nil_index_list(),
          context__.vals_r("log_amplitude"),
          "assigning variable log_amplitude_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= log_amplitude_1dim__; ++sym1__) {
          current_statement__ = 5;
          assign(log_amplitude,
            cons_list(index_uni(sym1__), nil_index_list()),
            log_amplitude_flat__[(pos__ - 1)],
            "assigning variable log_amplitude");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> raw_scale;
      raw_scale = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(raw_scale, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> raw_scale_flat__;
        current_statement__ = 6;
        assign(raw_scale_flat__, nil_index_list(),
          context__.vals_r("raw_scale"),
          "assigning variable raw_scale_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 6;
          assign(raw_scale, cons_list(index_uni(sym1__), nil_index_list()),
            raw_scale_flat__[(pos__ - 1)], "assigning variable raw_scale");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 6;
      assign(raw_scale, nil_index_list(),
        stan::math::positive_ordered_free(raw_scale),
        "assigning variable raw_scale");
      double range1_raw;
      range1_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      range1_raw = context__.vals_r("range1_raw")[(1 - 1)];
      current_statement__ = 7;
      range1_raw = stan::math::lub_free(range1_raw, 0, 1);
      double range2_raw;
      range2_raw = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      range2_raw = context__.vals_r("range2_raw")[(1 - 1)];
      current_statement__ = 8;
      range2_raw = stan::math::lub_free(range2_raw, 0, range1_raw);
      Eigen::Matrix<double, -1, 1> grb_xyz;
      grb_xyz = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(grb_xyz, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> grb_xyz_flat__;
        current_statement__ = 9;
        assign(grb_xyz_flat__, nil_index_list(), context__.vals_r("grb_xyz"),
          "assigning variable grb_xyz_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 9;
          assign(grb_xyz, cons_list(index_uni(sym1__), nil_index_list()),
            grb_xyz_flat__[(pos__ - 1)], "assigning variable grb_xyz");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 9;
      assign(grb_xyz, nil_index_list(),
        stan::math::unit_vector_free(grb_xyz), "assigning variable grb_xyz");
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(beta1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        vars__.emplace_back(beta2[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= k; ++sym2__) {
          vars__.emplace_back(omega_var[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= N_detectors; ++sym1__) {
        vars__.emplace_back(log_bkg[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= log_amplitude_1dim__; ++sym1__) {
        vars__.emplace_back(log_amplitude[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(raw_scale[(sym1__ - 1)]);}
      vars__.emplace_back(range1_raw);
      vars__.emplace_back(range2_raw);
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(grb_xyz[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("beta1");
    names__.emplace_back("beta2");
    names__.emplace_back("omega_var");
    names__.emplace_back("log_bkg");
    names__.emplace_back("log_amplitude");
    names__.emplace_back("raw_scale");
    names__.emplace_back("range1_raw");
    names__.emplace_back("range2_raw");
    names__.emplace_back("grb_xyz");
    names__.emplace_back("bkg");
    names__.emplace_back("amplitude");
    names__.emplace_back("scale");
    names__.emplace_back("range");
    names__.emplace_back("bw");
    names__.emplace_back("omega");
    names__.emplace_back("dt");
    names__.emplace_back("grb_phi");
    names__.emplace_back("grb_theta");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(k)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(k)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2),
                                             static_cast<size_t>(k)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_detectors)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(log_amplitude_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_detectors)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(amplitude_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2),
                                             static_cast<size_t>(k)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(dt_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "omega_var" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N_detectors; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_bkg" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= log_amplitude_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_amplitude" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "raw_scale" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "range1_raw");
    param_names__.emplace_back(std::string() + "range2_raw");
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "grb_xyz" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_detectors; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bkg" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= amplitude_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "amplitude" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "scale" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "range" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bw" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= dt_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dt" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "grb_phi");
      param_names__.emplace_back(std::string() + "grb_theta");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta2" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "omega_var" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= N_detectors; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_bkg" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= log_amplitude_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "log_amplitude" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "raw_scale" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "range1_raw");
    param_names__.emplace_back(std::string() + "range2_raw");
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "grb_xyz" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_detectors; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bkg" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= amplitude_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "amplitude" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "scale" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "range" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "bw" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= k; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= dt_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "dt" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "grb_phi");
      param_names__.emplace_back(std::string() + "grb_theta");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta1\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"beta2\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"omega_var\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"vector\",\"length\":" << k << "}},\"block\":\"parameters\"},{\"name\":\"log_bkg\",\"type\":{\"name\":\"vector\",\"length\":" << N_detectors << "},\"block\":\"parameters\"},{\"name\":\"log_amplitude\",\"type\":{\"name\":\"vector\",\"length\":" << log_amplitude_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"raw_scale\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"range1_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"range2_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"grb_xyz\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"parameters\"},{\"name\":\"bkg\",\"type\":{\"name\":\"vector\",\"length\":" << N_detectors << "},\"block\":\"transformed_parameters\"},{\"name\":\"amplitude\",\"type\":{\"name\":\"vector\",\"length\":" << amplitude_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"scale\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"range\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"bw\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"vector\",\"length\":" << k << "}},\"block\":\"transformed_parameters\"},{\"name\":\"dt\",\"type\":{\"name\":\"vector\",\"length\":" << dt_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"grb_phi\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"grb_theta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta1\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"beta2\",\"type\":{\"name\":\"vector\",\"length\":" << k << "},\"block\":\"parameters\"},{\"name\":\"omega_var\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"vector\",\"length\":" << k << "}},\"block\":\"parameters\"},{\"name\":\"log_bkg\",\"type\":{\"name\":\"vector\",\"length\":" << N_detectors << "},\"block\":\"parameters\"},{\"name\":\"log_amplitude\",\"type\":{\"name\":\"vector\",\"length\":" << log_amplitude_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"raw_scale\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"range1_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"range2_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"grb_xyz\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"parameters\"},{\"name\":\"bkg\",\"type\":{\"name\":\"vector\",\"length\":" << N_detectors << "},\"block\":\"transformed_parameters\"},{\"name\":\"amplitude\",\"type\":{\"name\":\"vector\",\"length\":" << amplitude_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"scale\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"range\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"bw\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"vector\",\"length\":" << k << "}},\"block\":\"transformed_parameters\"},{\"name\":\"dt\",\"type\":{\"name\":\"vector\",\"length\":" << dt_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"grb_phi\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"grb_theta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
using stan_model = rff_omega_ipn_model_namespace::rff_omega_ipn_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


